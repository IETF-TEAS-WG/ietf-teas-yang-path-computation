module ietf-te-path-computation {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-te-topology";
  // replace with IANA namespace when assigned

  prefix "tepc";

  import ietf-yang-types {
    prefix "yang-types";
  }

  import ietf-te-types {
    prefix "te-types";
  }

  import ietf-te-topology {
    prefix "tet";
  }
  
  import ietf-network {
    prefix "nd";
  }

  import ietf-network-topology {
    prefix "nt";
  }

  organization
    "Traffic Engineering Architecture and Signaling (TEAS)
     Working Group";

  contact
    "WG Web:   <http://tools.ietf.org/wg/teas/>
     WG List:  <mailto:teas@ietf.org>

     WG Chair: Lou Berger
               <mailto:lberger@labn.net>

     WG Chair: Vishnu Pavan Beeram
               <mailto:vbeeram@juniper.net>

   ";

  description "TE path computation model";
  
  revision "2016-10-10" {
    description "Initial revision";
    reference "TBD";
  }

  /*
   * Features
   */

  feature stateless-path-computation {
    description
      "This feature indicates that the system supports 
       stateless path computation.";
  }

  /*
   * Typedefs
   */
  
  typedef DirectiveValue {
    type enumeration {
      enum MINIMIZE;
      enum MAXIMIZE;
      enum ALLOW;
      enum DISALLOW;
      enum DONT_CARE;
    }
  }

  typedef ObjectiveFunction {
    type enumeration {
      enum MCP;
      enum MLP;
      enum MBP;
      enum MBC;
      enum MLL;
      enum MCC;
    }
  }

  /*
   * Groupings
   */
   
  grouping Path {
    list _telink {
      key 'link-ref';
      config false;
      uses nt:link-ref;
    }
    container _routingConstraint {
      config false;
      uses RoutingConstraint;
    }
    leaf uuid {
      type yang-types:uuid;
    }
    description "Path is described by an ordered list of TE Links.";
    
  }
  
  grouping PathCompServicePort {
    list _serviceEndPoint {
      key 'tp-ref';
      uses nt:tp-ref;
      config false;
    }
    /**leaf direction {
      type Tapi:PortDirection;
      config false;
      description "The orientation of defined flow.";
    }*/
    container serviceLayer {
      uses tet:te-node-tunnel-termination-attributes;
      config false;
    }
    leaf uuid {
      type yang-types:uuid;
    }
  }
  
  grouping PathComputationService {
    leaf-list _path-ref {
      type leafref {
        path '/path/uuid';
      }
      config false;
    }
    list _servicePort {
      key 'uuid';
      uses PathCompServicePort;
    }
    container _routingConstraint {
      uses RoutingConstraint;
    }
    container _objectiveFunction {
      uses PathObjectiveFunction;
    }
    container _optimizationConstraint {
      uses PathOptimizationConstraint;
    }
    leaf uuid {
      type yang-types:uuid;
    }
  }
  
  grouping PathObjectiveFunction {
    leaf objectiveFunction {
      type ObjectiveFunction;
      config false;
    }
  }
  
  grouping PathOptimizationConstraint {
    leaf trafficInterruption {
      type DirectiveValue;
      config false;
    }
  }
  
  grouping RoutingConstraint {
    leaf requestedCapacity {
      type decimal64 {
        fraction-digits 2;
      }
      config false;
      description "Capacity required for connectivity service.";
    }
    leaf serviceLevel {
      type string;
      config false;
      description "An abstract value the meaning of which is mutually agreed â€“ typically represents metrics such as - Class of service, priority, resiliency, availability";
    }
    container pathConstraints {
      config false;
      uses te-types:path-constraints;
      description "Service connectivity path selection properties";
    }
    leaf-list _includeTopology {
      type leafref {
        path '/nd:networks/nd:network/nd:network-id';
      }
      config false;
    }
    leaf-list _avoidTopology {
      type leafref {
        path '/nd:networks/nd:network/nd:network-id';
      }
      config false;
    }
    list _includePath {
      key 'link-ref';
      config false;
      uses nt:link-ref;
    }
    list _excludePath {
      key 'link-ref';
      config false;
      uses nt:link-ref;
    }
  }
  
  /*
   * Lists
   */  
  list path {
    key "uuid";
    uses Path;
  }
    
  list pathComputationService {
    key "uuid";
    uses PathComputationService;
  }

  /***********************
  * package Interfaces
  **********************/ 
  rpc statelessComputeP2PPath {
    input {
      list servicePort {
        min-elements 2;
        max-elements 2;
        uses PathCompServicePort;
      }
      container routingConstraint {
        uses RoutingConstraint;
      }
      container objectiveFunction {
        uses PathObjectiveFunction;
      }
    }
    output {
      container pathCompService {
          uses PathComputationService;
      }
    }
  }
    
  /**rpc computeP2PPath {
    input {
      list servicePort {
        min-elements 2;
        max-elements 2;
        uses PathCompServicePort;
      }
      container routingConstraint {
        uses RoutingConstraint;
      }
      container objectiveFunction {
        uses PathObjectiveFunction;
      }
    }
    output {
      container pathCompService {
        uses PathComputationService;
      }
    }
  }*/
  
  rpc optimizeP2PPath {
    input {
      leaf pathIdOrName {
        type string;
      }
      container routingConstraint {
        uses RoutingConstraint;
      }
      container optimizationConstraint {
        uses PathOptimizationConstraint;
      }
      container objectiveFunction {
        uses PathObjectiveFunction;
      }
    }
    output {
      container pathCompService {
        uses PathComputationService;
      }
    }
  }
  
  /**rpc deleteP2PPath {
    input {
      leaf pathIdOrName {
        type string;
      }
    }
    output {
      container pathCompService {
        uses PathComputationService;
      }
    }
  }*/

}

